image: node:13

prerequisites:
  stage: .pre
  cache:
    paths:
      - node_modules/
  script:
    - npm install --quiet
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/


get_version:
  stage: .pre
  only:
    - master
  script:
    - mkdir version
    - 'curl -f -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer ${FB_FUNCTION_API_KEY}" -H "BUILD_ID: ${CI_PIPELINE_IID}" -H "CI_PIPELINE_ID: ${CI_PIPELINE_ID}" https://us-central1-dw-bote.cloudfunctions.net/vPublicacion > version/actual'
    - APPVERSION=$(cat version/actual)
    - echo "export const environmentversion = '$APPVERSION';" > src/environments/environmentversion.ts
    - npm install -g cordova-set-version
    - cordova-set-version -v $APPVERSION -b $CI_PIPELINE_IID CordovaMobileApp/config.xml
  artifacts:
    paths:
      - version
      - CordovaMobileApp/config.xml
      - src/environments/environmentversion.ts
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/


build_web:
  stage: build
  dependencies:
    - prerequisites
    - get_version
  cache:
    paths:
      - node_modules/
  script:
    - npm run build-prod --prod
  artifacts:
    paths:
      - dist/
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/

#test:
#  stage: test
#  cache:
#    policy: pull
#    paths:
#      - node_modules/
#  script:
#    # install dependencies to use chrome w/ puppeteer
#    - apt update && apt install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
#    - npm run test-ci
#    - npm run e2e-ci
#  except:
#    variables:
#      - $CI_COMMIT_MESSAGE =~ /skip-ci/

deploy_web:
  stage: deploy
  environment:
    name: production
    url: $FIREBASE_URL
  only:
    - master
    - sourcemaps-rollbar
  dependencies:
    - build_web
  cache:
    policy: pull
    paths:
      - node_modules/
  script:
    - cd functions && npm install && cd -
    # deploy sourcemaps a rollbar para post-debug
    - chmod +x ./rollbar-sourcemaps.sh ; ./rollbar-sourcemaps.sh
    - npm run deploy
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/

build_android:
  stage: build
  dependencies:
    - prerequisites
    - get_version
  cache:
    paths:
      - node_modules/
  variables:
    ANDROID_COMPILE_SDK: "26"
    ANDROID_BUILD_TOOLS: "28.0.3"
  before_script:
    - apt-get update >/dev/null
    - apt-get install -y locales >/dev/null
    - echo "en_US UTF-8" > /etc/locale.gen
    - locale-gen en_US.UTF-8
    - export LANG=en_US.UTF-8
    - export LANGUAGE=en_US:en
    - export LC_ALL=en_US.UTF-8
  script:
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
    - unzip -q android-sdk.zip -d android-sdk-linux
    - export ANDROID_SDK_ROOT=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    - apt-get update; apt-get install openjdk-8-jdk -y
    #ACTUALIZAR gradle
    - wget https://services.gradle.org/distributions/gradle-6.3-bin.zip -P /tmp
    - unzip -d /opt/gradle /tmp/gradle-*.zip
    - export GRADLE_HOME=/opt/gradle/gradle-6.3
    - export PATH=${GRADLE_HOME}/bin:${PATH}
    #sdkmanager y licencias
    - android-sdk-linux/tools/bin/sdkmanager --update > update.log
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    - node_modules/.bin/ng build --prod --base-href . --output-path CordovaMobileApp/www/
    - cd CordovaMobileApp
    #FICHEROS PARA FIRMAR
    - echo $RELEASE_KEYSTORE_BASE64 | base64 -d > android.jks
    - cp $BUILD_JSON build.json
    - cp $GOOGLE_SERVICES google-services.json
    - npm install --quiet
    - ../node_modules/.bin/cordova platform rm android
    - ../node_modules/.bin/cordova platform add android
    - ../node_modules/.bin/cordova build android
    - ../node_modules/.bin/cordova build android --release
  artifacts:
    paths:
      - CordovaMobileApp/platforms/android/app/build/outputs/apk/

deploy_android:
  image: ruby:2.7
  stage: deploy
  only:
    - master
  dependencies:
    - build_android
  script:
    - cp $G_PLAY_API CordovaMobileApp/platforms/android/api-ci.json
    - gem install fastlane -NV
    - cd CordovaMobileApp/platforms/android
    - fastlane android deploy
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
